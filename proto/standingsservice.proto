syntax = "proto3";

package standingsservice_package;

message Boxer {
  int32 id = 1;
  string fullName = 2;
  int64 birthDate = 3;
  int32 height = 4;
  double weight = 5;
}

message Match {
  int32 id = 1;
  int32 homeBoxerId = 2;
  int32 awayBoxerId = 3;
  int64 matchTime = 4;
  bool isFinished = 5;
  optional int32 winnerBoxerId = 6;
}

message Standing {
  int32 boxerId = 1;
  int32 winCount = 2;
  int32 lossCount = 3;
  double score = 4;
}

message StandingAndMatches {
  Standing standing = 1;
  repeated Match matches = 2;
}

message GetAllStandingsResponse {
  int32 code = 1;
  string message = 2;
  repeated Standing standings = 3;
}

message GetStandingAndMatchesOfBoxerRequest {
  int32 boxerId = 1;
}

message GetStandingAndMatchesOfBoxerResponse {
  int32 code = 1;
  string message = 2;
  StandingAndMatches standingAndMatches = 3;
}

message SetupAddBoxerRequest {
  Boxer boxer = 1;
}

message SetupAddBoxerResponse {
  int32 code = 1;
}

message SetupAddBoxersRequest {
  repeated Boxer boxers = 1;
}

message SetupAddBoxersResponse {
  int32 code = 1;
}

message SetupAddMatchesRequest {
  repeated Match matches = 1;
}

message SetupAddMatchesResponse {
  int32 code = 1;
}

message Null {};

service StandingsService {
  rpc GetStandingAndMatchesOfBoxer(GetStandingAndMatchesOfBoxerRequest) returns (GetStandingAndMatchesOfBoxerResponse);
  rpc GetAllStandings(Null) returns (GetAllStandingsResponse);

  // Mock endpoints:
  rpc Mock(Null) returns (Null) {};
  rpc SetupAddBoxer(SetupAddBoxerRequest) returns (SetupAddBoxerResponse) {};
  rpc SetupAddBoxers(SetupAddBoxersRequest) returns (SetupAddBoxersResponse) {};
  rpc SetupAddMatches(SetupAddMatchesRequest) returns (SetupAddMatchesResponse) {};
}
